<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--实例化ServiceAccount对象-->
    <bean id="accountService" class="service.impl.AccountServiceImpl"></bean>

    <!--spring中基于XML的AOP配置步骤：
            1.把通知Bean也交给spring来管理
            2.使用aop：config标签表名aop的配置
            3.使用aop：aspect标签表明配置切面
                    id属性：是给切面提供一个唯一标识
                    ref属性：是指定通知类bean的id
            4.在aop：aspect标签的内部使用对应标签来配置通知的类型
                    我们现在示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
                    aop：before：表示配置前置通知
                        method属性：用于指定Logger类中那个方法是前置通知
                        pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

                  切入点表达式的写法：
                        关键字：execution（表达式）
                        表达式：访问修饰符   返回值    包名.包名.包名.....类名.方法名(参数列表)
                     例如：execution(public void com.spring.service.Impl.AccountServiceImpl.saveAccount())
                   表达式不同写法：
                        返回值可以用通配符，表示任意返回值
                            execution(*  com.spring.service.Impl.AccountServiceImpl.saveAccount())
                        包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.
                            execution(*  *.*.*.*.AccountServiceImpl.saveAccount())
                        包名还可以升级使用..表示当前包和子包
                            execution(*  *..AccountServiceImpl.saveAccount())
                        类名和方法名都可以使用*来实现通配
                            execution(*  *..*.*())
                        参数列表：
                            可以直接写数据类型：
                                基本数据类型：int、String
                                引用类型写包名.类名方式：java.lang.String
                            可以使用通配符表示任意类型，但是必须有参数：*
                            可以使用..表示有无参数均可，有参数可以是任意类型
                                全统配写法：*  *..*.*(..)
                                <aop:before method="printLog" pointcut="execution(*  *..*.*(..))"></aop:before>

                          实际开发中切入点表达式的通常写法：
                                切到业务层实现类下的所有方法
                                    * com.spring.service.impl.*.*(..)-->

    <!--1. 把通知bean交给spring来管理-->
    <bean id="logger" class="util.Logger"></bean>

    <!--2. 配置AOP-->
    <aop:config>
        <!--配置切入点表达式
                此标签写在aop：aspect标签内部只能当前切面用
                写在aop：aspect标签外面，就变成了所有切面可用
                注：在外面只能配置在切面之前-->
        <aop:pointcut id="pt1" expression="execution(* service.impl.*.*(..))"/>

        <!--3. 配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>